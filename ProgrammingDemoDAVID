// ProgrammingDemo.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <stdio.h>
#include <conio.h>
#include "ensc-488.h"
#include <iostream>
#include <string>
#include <Eigen/Dense>
#include <math.h>

using namespace std;
using namespace Eigen;

const double pi = 2 * acos(0.0);
float toDegree(float x)
{
	return (180 * x) / pi;
}

float toRad(float x)
{
	return (pi * x) / 180;
}
const float H1 = 405.0;
const float H2 = 70.0;
const float jointH3Lim[] = { -200, -100 };
const float H4 = 220.0;
const float H5 = 55.0;
const float L2 = 195.0;
const float L3 = 142.0;
const float joint1Lim[] = { toRad(-150) , toRad(150) };
const float joint2Lim[] = { toRad(-100) , toRad(100) };
const float joint3Lim[] = { 35, 135 };
const float joint4Lim[] = { toRad(-160), toRad(160) };


void jointVectorInput()
{
	/* Ask for the joint vector to be input in absolute coordinates and check that
	each of the responses falls within its limits.
	Store this as a joint vector called JV */
	float JV[4];
	bool lim,rep = true;
	JOINT g1;
	float Poise[4];
	float c1,s1,c12,s12,c24,s42;
	int c;

	do {
		do {
			cout << "Please enter the value of Theta1 [\260]: "; 
			//degree symbol does not display in console either by text or HTML symbol call
			cin >> g1[0];
			JV[0] = toRad(g1[0]);
			if (JV[0] < joint1Lim[0] || JV[0] > joint1Lim[1])
			{
				cout << "Joint 1 out of limits as Theta1 must be between -150\260 and +150\260";
				lim = false;
			}
			else { lim = true; }
		} while (lim == false);
		do {
			cout << "Please enter the value of Theta2 [\260]: ";
			cin >> g1[1];
			JV[1] = toRad(g1[1]);
			if (JV[1] < joint2Lim[0] || JV[1] > joint2Lim[1])
			{
				cout << "Joint 2 out of limits as Theta2 must be between -100\260 and +100\260";
				lim = false;
			}
			else { lim = true; }
		} while (lim == false);
		do {
			cout << "Please enter the value of H3 [mm]: ";
			cin >> g1[2];
			JV[2] = g1[2];
			if (JV[2] < jointH3Lim[0] || JV[2] > jointH3Lim[1])
			{
				cout << "Joint 3 out of limits as H3 must be between -100mm and -200mm";
				lim = false;
			}
			else { lim = true; }
		} while (lim == false);
		do {
			cout << "Please enter the value of Theta4 [\260]: ";
			cin >> g1[3];
			JV[3] = toRad(g1[3]);
			if (JV[3] < joint4Lim[0] || JV[3] > joint4Lim[1])
			{
				cout << "Joint 4 out of limits as Theta4 must be between -150\260 and +150\260";
				lim = false;
			}
			else { lim = true; }
		} while (lim == false);
	
		/*Calculate the Poise of the gripper given the joint vector and print it numerically*/
		float Poise[4];
		float c1 = cos(JV[0]);
		float s1 = sin(JV[0]);
		float c12 = cos(JV[0] + JV[1]);
		float s12 = sin(JV[0] + JV[1]);
		float c24 = cos(JV[1] - JV[3]);
		float s42 = sin(JV[3] - JV[1]);
		Poise[0] = c1 * L2 + c12 * L3;
		Poise[1] = s1 * L2 + s12 * L3;
		Poise[2] = H1 + H2 - (JV[2] + 270 + H4 + H5);
		Poise[3] = atan2(-s1 * s42 - c1 * c24, c1 * s42 - s1 * c24);
		cout << "\n" << "The input joint vector will put the centre of the grabber at:\n";
		cout << "X = " << Poise[0] << " mm \n";
		cout << "Y = " << Poise[1] << " mm \n";
		cout << "Z = " << Poise[2] << " mm \n";
		cout << "Phi = " << toDegree(Poise[3]) << " degrees \n";

		/*Display the Poise of the gripper at the given joint vector*/
		
		DisplayConfiguration(g1);
		printf("\nPress any key to continue or press ESC to exit \n");
		c = _getch();
		if (c != 27)//27 is the value for ESC key press
		{
			cout << "\n\n";
			rep = true;
		}
		else
			break;

	} while (rep);
}



int main()
{
	char ch;
	int c;
	bool sel = true;
	printf("Press any key to continue or press ESC to exit \n");
	c = _getch();
	do {
		if (c != 27)//27 is the value for ESC key press
		{
			printf("Press '1' to select the forward calculation or \n");
			printf("press '2' to select the inverse calculation \n");
			ch = _getch();
			switch (ch) {
			case '1':
				cout << "\n"; 
				cout << "Forward Kinematics\n";
				jointVectorInput();
				sel = true;
				break;
			case '2':
				cout << "\n"; 
				cout << "Inverse Kinematics\n";
				//Muhannad's function
				sel = true;
				break;
			default:
				cout << "Press ESC to exit\n";
				sel = false;
			}
		}
		else
				break;

	} while (sel);

	return 0;
}
